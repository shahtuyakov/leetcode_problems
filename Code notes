#Swap elements in arr

const swap = (a, b) => [arr[a],arr[b]] = [arr[b],arr[a]]

-------------------

StringNum -> Number

let strN = "5164"
let num = 0;
num = num * 10 + ~~strN

------------------

Loop + if statement 

for (let i = 0, j = 6; arr[i] === arr[j], i++, j--){
    code
}

-----------------

Count "1" in number (biary)

let x = 45;
let count = 0;

while(x){
  count += x & 1;
  x >>= 1;
}

----------------

Remove dup in arr

let dup = [1,1,1,3,3,4,3,2,4,2];
let wdup = [...new Set(arr)];

--------------

Find duplicate in arr 

let res = new Set(nums).size != nums.length ? true : false

-------------

Converting number to any base

var convertToBase = function(num) {
    return num.toString(base);
};

---------------------

Is char in strelement of arr
arr = ["abc","rtt","for"];

if (~arr[i].indexOf("char")){
    code
}

--------------------

Count all odd numbers in range

res = Math.floor((high - low) / 2);
if (low % 2 != 0 || high % 2 != 0) res++;

------------------

Math.floor operation

let x = ((left + rigth) / 2) << 0;

-----------------

Max element in array

let max = Math.max(...arr);

---------------

Get first 2 max element in array

let arr = [1,4,2,5,7,4,24,6];
const [stoneA, stoneB, ...anyStones] = arr.sort((a, b) => b - a);

stoneA = 24;
stoneB = 7;

anyStones = [6,5,4,4,2,1];

-------------

Count duplicates in arr

let nums = [1,2,3,4,4,6,7,7];
let obj = {};

for (let i = 0; i < nums.length; i++){
    obj[nums[i]] = (obj[nums[i]] || 0) + 1;
}

---------------

Obj to arr 

let x = [...Object.keys(obj)]

-----------

Map array of elements

let map = new Map();
nums.forEach(n => map.set(n, map.get(n) + 1 || 1));

-------------------

sortedArray of map elements by value

let sortedArray = [...map.entries()].sort((a, b) => b[1] - a[1]);

-----------------

Create array from linked list

function traverseList(list) {
    let head = list
    let array = [];
    while(head != null) {
        array.push(head.val)
        head = head.next
    }
    
    return array
}

---------------

Create Linked List from array

function createList(array) {
    var list = null;
  for (var i = array.length - 1; i >= 0; i--)
    list = {val: array[i], next: list};
  return list;
}

--------------------

Swaping linked list if statement 

if (l1.val > l2.val){
    [l1, l2] = [l2, l1]
}

    if (!l1) return l2;
    if (!l2) return l1;
    ||||||||||||||||||
if (!l1 || !l2 ) return l1 || l2

curN.next = l1 || l2; -- l1.length > < l2.length => curN.length + l1.length || l2.length

-------------------

Reverse Linked List

function reverse(head) {
  let prev = null, next = null;
  while (head) {
    next = head.next;
    head.next = prev;
    prev = head;
    head = next;
  }
  return prev;
}

-----------------

Middle of Linked list

let slow=head, fast=head;
    
while(fast.next != null && fast.next.next != null){
    slow=slow.next;
    fast=fast.next.next;
}



----------------

Range between [-231, 231 - 1]

res > Math.pow(2, 31) - 1 || res < -Math.pow(2, 31)

-----------------------------------------------










