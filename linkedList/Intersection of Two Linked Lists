/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */

/**
 * @param {ListNode} headA
 * @param {ListNode} headB
 * @return {ListNode}
 */
var getIntersectionNode = function(headA, headB) {
    let getTailData = (head) => {
        let data;
        let size = 0;
        while (head){
            size++;
            data = head.val;
            head = head.next;
        }
        return [data, size];
    }
    
    let getKthNode = (head, k) => {
        while (k > 0){
            head = head.next;
            k--;
        }
        return head;
    }
    
    let A = getTailData(headA);
    let B = getTailData(headB);
    
    if (A[0] !== B[0]) return null;
    
    let long = A[1] < B[1] ? headB : headA;
    let short = A[1] < B[1] ? headA : headB;
    
    let lenDiff = Math.abs(A[1] - B[1]);
    long = getKthNode(long, lenDiff);
    
    while (short != long){
        short = short.next;
        long = long.next;
    }
    return short;
};
